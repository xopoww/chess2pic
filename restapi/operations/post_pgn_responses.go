// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/xopoww/chess2pic/models"
)

// PostPgnOKCode is the HTTP code returned for type PostPgnOK
const PostPgnOKCode int = 200

/*
PostPgnOK Converted image

swagger:response postPgnOK
*/
type PostPgnOK struct {

	/*
	  In: Body
	*/
	Payload io.ReadCloser `json:"body,omitempty"`
}

// NewPostPgnOK creates PostPgnOK with default headers values
func NewPostPgnOK() *PostPgnOK {

	return &PostPgnOK{}
}

// WithPayload adds the payload to the post pgn o k response
func (o *PostPgnOK) WithPayload(payload io.ReadCloser) *PostPgnOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post pgn o k response
func (o *PostPgnOK) SetPayload(payload io.ReadCloser) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostPgnOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PostPgnBadRequestCode is the HTTP code returned for type PostPgnBadRequest
const PostPgnBadRequestCode int = 400

/*
PostPgnBadRequest Client error (typically, a malformed PGN notation)

swagger:response postPgnBadRequest
*/
type PostPgnBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostPgnBadRequest creates PostPgnBadRequest with default headers values
func NewPostPgnBadRequest() *PostPgnBadRequest {

	return &PostPgnBadRequest{}
}

// WithPayload adds the payload to the post pgn bad request response
func (o *PostPgnBadRequest) WithPayload(payload *models.Error) *PostPgnBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post pgn bad request response
func (o *PostPgnBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostPgnBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
