// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostPgnHandlerFunc turns a function with the right signature into a post pgn handler
type PostPgnHandlerFunc func(PostPgnParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostPgnHandlerFunc) Handle(params PostPgnParams) middleware.Responder {
	return fn(params)
}

// PostPgnHandler interface for that can handle valid post pgn params
type PostPgnHandler interface {
	Handle(PostPgnParams) middleware.Responder
}

// NewPostPgn creates a new http.Handler for the post pgn operation
func NewPostPgn(ctx *middleware.Context, handler PostPgnHandler) *PostPgn {
	return &PostPgn{Context: ctx, Handler: handler}
}

/*
	PostPgn swagger:route POST /pgn postPgn

Convert PGN game to GIF animation
*/
type PostPgn struct {
	Context *middleware.Context
	Handler PostPgnHandler
}

func (o *PostPgn) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostPgnParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostPgnBody post pgn body
// Example: {"from-white":true,"notation":"[FEN \"k7/1p6/8/8/8/8/6P1/7K w - - 0 1\"]\n\n1. g4 b5 2. g5 b4"}
//
// swagger:model PostPgnBody
type PostPgnBody struct {

	// visualize form white's persective
	// Required: true
	FromWhite *bool `json:"from-white"`

	// Chess game in PGN notation
	// Required: true
	Notation *string `json:"notation"`
}

// Validate validates this post pgn body
func (o *PostPgnBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFromWhite(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNotation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostPgnBody) validateFromWhite(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"from-white", "body", o.FromWhite); err != nil {
		return err
	}

	return nil
}

func (o *PostPgnBody) validateNotation(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"notation", "body", o.Notation); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post pgn body based on context it is used
func (o *PostPgnBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostPgnBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostPgnBody) UnmarshalBinary(b []byte) error {
	var res PostPgnBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
