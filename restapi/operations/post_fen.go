// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostFenHandlerFunc turns a function with the right signature into a post fen handler
type PostFenHandlerFunc func(PostFenParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostFenHandlerFunc) Handle(params PostFenParams) middleware.Responder {
	return fn(params)
}

// PostFenHandler interface for that can handle valid post fen params
type PostFenHandler interface {
	Handle(PostFenParams) middleware.Responder
}

// NewPostFen creates a new http.Handler for the post fen operation
func NewPostFen(ctx *middleware.Context, handler PostFenHandler) *PostFen {
	return &PostFen{Context: ctx, Handler: handler}
}

/*
	PostFen swagger:route POST /fen postFen

Convert FEN position to PNG image
*/
type PostFen struct {
	Context *middleware.Context
	Handler PostFenHandler
}

func (o *PostFen) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostFenParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostFenBody post fen body
// Example: {"from-white":true,"notation":"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR"}
//
// swagger:model PostFenBody
type PostFenBody struct {

	// visualize form white's persective
	// Required: true
	FromWhite *bool `json:"from-white"`

	// Chess position in FEN notation
	// Required: true
	Notation *string `json:"notation"`
}

// Validate validates this post fen body
func (o *PostFenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFromWhite(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNotation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostFenBody) validateFromWhite(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"from-white", "body", o.FromWhite); err != nil {
		return err
	}

	return nil
}

func (o *PostFenBody) validateNotation(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"notation", "body", o.Notation); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post fen body based on context it is used
func (o *PostFenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostFenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostFenBody) UnmarshalBinary(b []byte) error {
	var res PostFenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
