// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "produces": [
    "application/json",
    "image/png",
    "image/gif"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "chess2pic REST API server",
    "title": "chess2pic",
    "version": "1.0.0"
  },
  "paths": {
    "/fen": {
      "post": {
        "summary": "Convert FEN position to PNG image",
        "parameters": [
          {
            "description": "FEN visualization request",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "notation"
              ],
              "properties": {
                "notation": {
                  "description": "Chess position in FEN notation",
                  "type": "string"
                }
              },
              "example": {
                "notation": "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Converted image",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "400": {
            "description": "Client error (typically, a malformed FEN notation)",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pgn": {
      "post": {
        "summary": "Convert PGN game to GIF animation",
        "parameters": [
          {
            "description": "PGN visualization request",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "notation"
              ],
              "properties": {
                "notation": {
                  "description": "Chess game in PGN notation",
                  "type": "string"
                }
              },
              "example": {
                "notation": "[FEN \"k7/1p6/8/8/8/8/6P1/7K w - - 0 1\"]\n\n1. g4 b5 2. g5 b4"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Converted image",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "400": {
            "description": "Client error (typically, a malformed PGN notation)",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "type": "string"
        }
      },
      "example": {
        "error": "you've done something wrong"
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "produces": [
    "application/json",
    "image/gif",
    "image/png"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "chess2pic REST API server",
    "title": "chess2pic",
    "version": "1.0.0"
  },
  "paths": {
    "/fen": {
      "post": {
        "summary": "Convert FEN position to PNG image",
        "parameters": [
          {
            "description": "FEN visualization request",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "notation"
              ],
              "properties": {
                "notation": {
                  "description": "Chess position in FEN notation",
                  "type": "string"
                }
              },
              "example": {
                "notation": "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Converted image",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "400": {
            "description": "Client error (typically, a malformed FEN notation)",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pgn": {
      "post": {
        "summary": "Convert PGN game to GIF animation",
        "parameters": [
          {
            "description": "PGN visualization request",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "notation"
              ],
              "properties": {
                "notation": {
                  "description": "Chess game in PGN notation",
                  "type": "string"
                }
              },
              "example": {
                "notation": "[FEN \"k7/1p6/8/8/8/8/6P1/7K w - - 0 1\"]\n\n1. g4 b5 2. g5 b4"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Converted image",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "400": {
            "description": "Client error (typically, a malformed PGN notation)",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "type": "string"
        }
      },
      "example": {
        "error": "you've done something wrong"
      }
    }
  }
}`))
}
